# -*- coding: utf-8 -*-
"""
Created on Sat Mar 19 14:08:54 2016

@author: My402
"""
import numpy as np
import matplotlib.pyplot as plt
from numpy import random,size,array,mean,std,zeros,ceil
from A51 import A51

plt.close('all')

def sampling(N,seed,std,l_mean,r_mean):   
    random.seed(seed)
    rd = random.randn(N)
    RSSI = np.r_[std*rd[:N/2]+l_mean, std*rd[N/2:]+r_mean]
    RSSI= ceil(RSSI)
    random.seed()
    return RSSI
    
def quantization_lossy(RSSI):
    block_size = 25
    a = 0.8
    block_num = size(RSSI)/block_size    
    bit_stream = array([],dtype=np.int32)
    
    for i in range(block_num):
        RSSI_bl = RSSI[i*block_size:(i+1)*block_size]
        mean_value = mean(RSSI_bl)
        std_deviation = std(RSSI_bl)
        threshold_high = mean_value+a*std_deviation
        threshold_low = mean_value-a*std_deviation
        
        saved_single = array([])
        droped_single = array([])
        for j in range(block_size):
            if RSSI_bl[j]>threshold_high:
                bit_stream = np.r_[bit_stream,1]
                saved_single = np.r_[saved_single,j]
                
            elif RSSI_bl[j]<threshold_low:
                bit_stream = np.r_[bit_stream,0]
                saved_single = np.r_[saved_single,j]
            else:
                droped_single = np.r_[droped_single,j]
    
#    plt.figure(figsize=(8,5))
#    plt.scatter(saved_single,RSSI_bl[list(saved_single)],color='g',label='RSS measurements\nused for quantization')
#    plt.scatter(droped_single,RSSI_bl[list(droped_single)],color='r',label='Dropped RSS meaurements')
#    plt.plot(range(-1,block_size+1),[mean_value]*(block_size+2),'k-')
#    plt.plot(range(-1,block_size+1),[threshold_high]*(block_size+2),'k--')
#    plt.plot(range(-1,block_size+1),[threshold_low]*(block_size+2),'k--')
#    plt.text(-0.2,mean_value+0.2,'Mean',color='b')
#    plt.text(-0.2,threshold_high+0.2,'Upper\nThreshold',color='b')
#    plt.text(-0.2,threshold_low+0.2,'Lower\nThreshold',color='b')
#    plt.xlim(-1,block_size)
#    plt.title('A sample RSSI quantizer')
#    plt.xlabel('Probes')
#    plt.ylabel('RSSI(dBm)')
#    plt.legend()    
    return bit_stream
    
def quantization_lossless(RSSI):
    block_size = 25
    block_num = size(RSSI)/block_size    
    bit_stream = array([],dtype=np.int32)
    
    for i in range(block_num):
        RSSI_bl = RSSI[i*block_size:(i+1)*block_size]
        mean_value = mean(RSSI_bl)
        substract = RSSI_bl-mean_value
        
        one_point  = array([])
        zero_point = array([])
        for j in range(block_size):
            if substract[j]>0:
                bit_stream = np.r_[bit_stream,1]
                one_point  = np.r_[one_point,j]               
            else:
                bit_stream = np.r_[bit_stream,0]
                zero_point = np.r_[zero_point,j]
    
#    plt.figure(figsize=(8,5))
#    plt.scatter(one_point, RSSI_bl[list(one_point)], color='g',label='RSS measurements quantized to 1')
#    plt.scatter(zero_point,RSSI_bl[list(zero_point)],color='r',label='RSS measurements quantized to 0')
#    plt.plot(range(-1,block_size+1),[mean_value]*(block_size+2),'k-')
#    plt.text(-0.2,mean_value+0.2,'Mean',color='b')
#    plt.xlim(-1,block_size)
#    plt.title('A sample RSSI quantizer')
#    plt.xlabel('Probes')
#    plt.ylabel('RSSI(dBm)')
#    plt.legend()
    return bit_stream
    
def BMR(bitA,bitB):
    diff = np.abs(bitA-bitB)
    BMR = np.sum(diff)/(size(bitA)+0.0)
    return BMR

BMR_AB = zeros(20)
BMR_AE = zeros(20)
BMR_AE1 = zeros(20)
for i in range(20):
    RSSI_A = sampling(200,i,3,-63,-53)
    RSSI_B = sampling(200,i,5,-70,-60)
    RSSI_E = sampling(200,i+5,5,-70,-60)
    
    bit_A = quantization_lossless(RSSI_A)
    bit_B = quantization_lossless(RSSI_B)
    bit_E = quantization_lossless(RSSI_E)
    bit_E_err1 = bit_B.copy();          # 假设非法用户只弄错了一位，更假设就弄错了第一位
    bit_E_err1[0] = bit_E_err1[0]^1 
    
    posA = A51(bit_A,36)
    posB = A51(bit_B,36)
    posE = A51(bit_E,36)
    posE_err1 = A51(bit_E_err1,36)
    
    BMR_AB[i] = BMR(bit_A,bit_B)
    BMR_AE[i] = BMR(bit_A,bit_E)
    BMR_AE1[i] = BMR(bit_A,bit_E_err1)
    
plt.figure(figsize=(8,5))
plt.plot(RSSI_A,'bo-',label='Sender device')
plt.plot(RSSI_B,'g*-',label='Receiver device')
plt.plot(RSSI_E,'r*-',label='Eavesdropper')
plt.title('RSSI generated by communication parties')
plt.xlabel('Probes')
plt.ylabel('RSSI(dBm)')
plt.legend()

plt.figure(figsize=(8,5))
plt.plot(BMR_AB,'go-',label='BMR of receiver')
plt.plot(BMR_AE,'ro-',label='BMR of eavesdropper')
plt.plot(BMR_AE1,'mo-',label='BMR of eavesdropper\n(1 bit error)')
plt.title('BMR performance')
plt.xlabel('Group')
plt.ylabel('BMR')
plt.ylim(-0.2,1.0)
plt.legend()